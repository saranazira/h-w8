# 1.  (5 баллов) 
# Написать функцию div_by_5, принимающую 1 аргумент — число от 0 до 1000 (проверять входные данные не нужно),
#  и возвращающую True, если оно делится на 5 без остатка, и False - иначе.

# def div_by_5(a):
#   if a in range(0,1000):
#     if a % 5 == 0:
#       return True
#   else:
#     return False

# print(div_by_5(5))



# 2. (15 баллов) Напишите функцию которая называется explore_list, 
# которая принимает в качестве аргумента список из чисел (проверять, 
# что он состоит из чисел НЕ нужно) 
# и возвращает словарь, у которого должна быть следующая структура:
# {
#     ‘less_that_15’: # список элементов, которые меньше 15,
#     ‘middle’: # средний элемент в списке по индексу (без сортировки),
#     ‘odd’: # список из всех нечетных элементов в списке,
#     ‘even’: # список из всех четных элементов в списке
# }

# list_=[127,435,567,12,10,50]
# i = []

# def explore_list():
#     if i in list_ < 15:
#         print(i)

# explore_list()



# 3. (20 баллов) Напишите функцию id_generator, которая должна сгенерировать набор числовых данных 
# длиной в 16 символов из целочисленных значений и вернуть в качестве строкового значения

# import random
# import string

# def id_generator(length):
#     letters_and_digits = string.ascii_letters + string.digits
#     rand_string = ''.join(random.sample(letters_and_digits, length))
#     print("Alphanum Random string of length", length, "is:", rand_string)

# id_generator(16)


# 4. (15 баллов) Напишите функцию factorial, которая будет получать в качестве аргумента число и
#  ВОЗВРАЩАТЬ факториал этого числа.
# Факториал натурального числа n определяется как произведение всех натуральных чисел от 1 до n включительно. 
# Например, факториал числа 5 = 1*2*3*4*5 = 120

# def fac(n):
#     if n == 0:
#         return 1
#     return fac(n-1) * n
 
# print(fac(5))

# 5. (10 баллов) Создайте функцию, которая называется my_color, данная функция принимает в качестве аргумента 
# строковое значение. Полученное значение функция должна записать в файл, который будет называться my_color.txt. 
# (Каждая следующая запись должна перезаписывать предыдущие записи)
# file = open('my_color.txt', 'w')
# list_= []
# file.write('Codify')
# for i in list_:
#     file.write(i)
# file.close()


# 6. (15 баллов) Создать функцию get_car, которая описывает автомобиль. 
# Данная функция принимает в себя два обязательных аргумента и далее
# ПРОИЗВОЛЬНЫЙ НАБОР ИМЕННОВАННЫХ АРГУМЕНТОВ **kwargs.
# Обязательные аргументы это brand (марка машины) и year (год выпуска).
# Далее из всех полученных аргументов функция должна построить словарь, содержащий все свойства автомобиля,
# переданные в качестве аргументов

# # car_model ={
# #     "Brand":"BMW",
# #     "Brand":"Mercedes"
# # }
# car_model = ['BMW', 'MERS']
# car_year = [1980, 1999]
# # car_year = {
# #     "year":"1980",
# #     "year":"1990"
# # }

# def get_car(a, b,**kwargs):
#     for 
# print(get_car(**car_model,**car_year))


# 7. (20 баллов) Создать функцию maskify, которая заменяет все символы, кроме последних четырех, на «#».
#     Например
#     "4556364607935616”     -->     "############5616"
#      "64607935616"          -->          "#######5616"
#                "1"              -->    "1"
#                 "4321"              -->    "4321"

# def maskify(a):
#   grid_len = len(a) - 4
#   return "#" * grid_len + a[-4:]


# print(maskify("4556364607935616"))

